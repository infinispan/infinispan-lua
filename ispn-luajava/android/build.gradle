plugins {
    id 'com.android.library'
}

repositories {
    mavenLocal()
    google()
    mavenCentral()
}

group = rootProject.group
version = rootProject.version

ext {
    luaVersions = ['lua51', 'lua52', 'lua53', 'lua54', 'luajit']
}

android {
    namespace = project(':').group

    defaultConfig {
        minSdk 21
        targetSdk 34
        compileSdk 33
        versionCode 1
        versionName '3.1'
    }

    sourceSets { container ->
        luaVersions.each { v ->
            String ver = v
            container.create(ver) {
                namespace "${project(':').group}.${ver}"
                manifest.srcFile 'AndroidManifest.xml'
                jniLibs.srcDirs = ["${ver}-libs"]
            }
        }
    }

    flavorDimensions += 'lua'

    productFlavors { container ->
        luaVersions.each { ver ->
            String v = ver
            container.create(v) {
                dimension 'lua'
            }
        }
    }

    buildTypes { container ->
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            matchingFallbacks ['release']
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

tasks.register('copyAndroidNatives') {
    doFirst {
        List<String> platforms = ['armeabi-v7a', 'arm64-v8a', 'x86_64', 'x86']
        luaVersions.forEach { ver ->
            platforms.forEach { platform ->
                String outputDir = "${ver}-libs/${platform}"
                file(outputDir).mkdirs()

                copy {
                    from fileTree(project(":${ver}").projectDir.toPath().toAbsolutePath()
                            .resolve("libs/${platform}"))
                    into outputDir
                    include "*.so"
                }
            }
        }
    }
}

tasks.configureEach { packageTask ->
    if (packageTask.name.contains("merge") && packageTask.name.contains("JniLibFolders")) {
        packageTask.dependsOn 'copyAndroidNatives'
    }
}

apply plugin: 'maven-publish'
apply plugin: 'signing'

apply from: project(':').file('pom.gradle')

afterEvaluate {
    generateLua51ReleaseBuildConfig.enabled = false
    generateLua52ReleaseBuildConfig.enabled = false
    generateLua53ReleaseBuildConfig.enabled = false
    generateLua54ReleaseBuildConfig.enabled = false
    generateLuajitReleaseBuildConfig.enabled = false

    publishing {
        publications {
            create('default', MavenPublication) { container ->
                setPom(pom, '')
                luaVersions.each { v ->
                    String ver = v
                    String path = "${buildDir}/outputs/aar/android-${ver}-release.aar"
                    file(path).getParentFile().mkdirs()
                    file(path).createNewFile()
                    container.artifact(path) {
                        classifier ver
                        extension 'aar'
                    }
                }
            }
        }

        repositories {
            maven {
                name = 'OSSRH'
                url = rootProject.version.toString().endsWith('-SNAPSHOT')
                        ? 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
                        : 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
                credentials {
                    username = System.getenv("MAVEN_USERNAME")
                    password = System.getenv("MAVEN_PASSWORD")
                }
            }
        }
    }

    signing {
    required { !project.hasProperty('skipSigning') }
        useInMemoryPgpKeys(
                System.getenv("GPG_KEY_ID"),
                System.getenv("GPG_SECKEY"),
                System.getenv("GPG_PASSPHRASE"),
        )
        sign publishing.publications.default
    }
}

tasks.configureEach { packageTask ->
    if (packageTask.name.toLowerCase().contains("maven")) {
        packageTask.dependsOn 'assemble'
    }
}
